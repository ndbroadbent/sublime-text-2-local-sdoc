#!/bin/bash
[[ -s "$HOME/.scm_breeze/scm_breeze.sh" ]] && source "$HOME/.scm_breeze/scm_breeze.sh"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Hardcoded list of ignored gems that cause problems with sdoc.
# You can add your own gems by adding them to ~/.sdoc/ignored_gems
ignored_gems="jasmine-1.1.0 therubyracer-0.10.2"

# Set the editor name in the 'open with ...' link text
export EDITOR_NAME='Sublime Text 2'

rvmrc_or_default() {
  if type rvm > /dev/null 2>&1; then
    # Use .rvmrc, or default ruby
    if [ -e .rvmrc ]; then
      if ! . .rvmrc; then
        # Quit if ruby version not installed.
        echo "Aborting: . .rvmrc failed!"
        exit
      fi
    else
      rvm default
    fi
  fi
}

abort_if_revision_unchanged() {
  # Abort if no HEAD commit
  /usr/local/bin/git rev-parse HEAD > /dev/null 2>&1 || exit

  # Don't continue if revision hasn't changed since last time.
  if [ -e "$1" ]; then
    if grep -q "$(/usr/local/bin/git rev-parse HEAD)" "$1"; then
      echo "No changes in $(pwd)"
      exit
    fi
  fi
}

store_current_revision() {
  # Store current revision so we don't keep processing unchanged projects
  git_exclude "$1"
  /usr/local/bin/git rev-parse HEAD > "$1"
}


REVISION_FILE=".sdoc_revision~"
SDOC_PATH="$HOME/.sdoc"

abort_if_revision_unchanged "$REVISION_FILE"

# Project must contain a Gemfile
if ! [ -e Gemfile ]; then exit; fi

rvmrc_or_default

# Ensure sdoc_local_editor gem is installed
if ! gem list sdoc_local_editor | grep -q sdoc_local_editor; then
  gem install sdoc_local_editor;
fi

echo "Generating sdoc for $(pwd)..."
echo "--------------------------------------------------------------------------------"

project_name="$(basename $(pwd))"
logical_path="$(pwd | sed "s%^$GIT_REPO_DIR/%%")"

mkdir -p "$SDOC_PATH/rubies/" "$SDOC_PATH/gems/$RUBY_VERSION/"
sdoc_paths=""
sdoc_names=""

# Build sdoc for the current project, including links to local files
# ------------------------------------------------------------------
sdoc_local_editor --op "$SDOC_PATH/projects/$logical_path"
sdoc_names+="$project_name,"
sdoc_paths+="$SDOC_PATH/projects/$logical_path "

# Build sdoc for current Ruby version (unless already generated)
# ----------------------------------------------------------------
ruby_rvm_dir="$HOME/.rvm/src/$RUBY_VERSION/"
ruby_sdoc_dir="$SDOC_PATH/rubies/$RUBY_VERSION"
if ! [ -e "$ruby_sdoc_dir/index.html" ]; then
  (
    cd "$ruby_rvm_dir"
    if ! sdoc_local_editor --op "$ruby_sdoc_dir"; then
      echo "Could not generate sdoc for $RUBY_VERSION! Aborting..."
      exit 1
    fi
  )
else
  echo "sdoc already generated for $RUBY_VERSION"
fi

sdoc_names+="ruby (${RUBY_VERSION#ruby-}),"
sdoc_paths+="$ruby_sdoc_dir "

# Fetch the list of required gems
required_gems=$(bundle list | sed 1d | sed "s/\s*\* \([^ ]*\) (\([^) ]*\).*/\1-\2/")

function add_gem_and_sdoc_path_if_index(){
  if [ -e "$sdoc_dir/index.html" ]; then
    gem_name=$(echo $1 | sed 's/\(.*\)-\([^-]*\)$/\1 (\2)/')
    sdoc_names+="$gem_name,"
    sdoc_paths+="$2 "
  fi
}

# Build sdoc for each gem (unless already generated)
# ----------------------------------------------------------------
for gem in $required_gems; do
  rvm_dir="$HOME/.rvm/gems/$RUBY_VERSION/gems/$gem"
  sdoc_dir="$SDOC_PATH/gems/$RUBY_VERSION/$gem"

  if ! [ -e "$sdoc_dir/.sdoc_generated" ]; then
    if [ -d "$rvm_dir" ]; then
      # Skip any ignored gems that cause problems with sdoc
      if [[ "$ignored_gems" == *$gem* ]] ||
         ([ -e "$SDOC_PATH/ignored_gems" ] && grep -q "^$gem$" "$SDOC_PATH/ignored_gems"); then
        echo "Skipping $gem - Ignored by \$ignored_gems or ~/.sdoc/ignored_gems"
        break
      fi

      (
        cd "$rvm_dir"
        echo "Generating sdoc for gem: $gem..."
        if sdoc_local_editor --op "$sdoc_dir"; then
          touch "$sdoc_dir/.sdoc_generated"
          add_gem_and_sdoc_path_if_index $gem $sdoc_dir
        fi
      )
    fi
  else
    echo "sdoc already generated for gem: $gem"
    add_gem_and_sdoc_path_if_index $gem $sdoc_dir
  fi
done

# Merge all the generated sdocs together to provide complete project documentation
rm -rf "$SDOC_PATH/merged_projects/$logical_path"
echo "Merging project sdocs into $SDOC_PATH/merged_projects/$logical_path..."
sdoc_local_editor_merge --title "$project_name" --op "$SDOC_PATH/merged_projects/$logical_path" --names "$sdoc_names" $sdoc_paths

store_current_revision "$REVISION_FILE"